usertypexfuente$source[i],
ignore.case = T)
adsense <- grepl("tpc.googlesyndication.com|
googleads[.]g[.]doubleclick[.]net",usertypexfuente$source[i], ignore.case = T)
redes.sociales <- grepl("facebook.com|
twitter.com",usertypexfuente$source[i], ignore.case = T)
if (usertypexfuente$source[i] == "(direct)") {
usertypexfuente$fuente[i] <- "directo"
}
else if (usertypexfuente$medium[i] == "organic" |
organic) {
usertypexfuente$fuente[i] <- "organico"
}
else if (usertypexfuente$source[i] == "google"
& adwords) {
usertypexfuente$fuente[i] <- "adwords"
}
else if (referral) {
usertypexfuente$fuente[i] <- "referencias"
}
else if (adsense) {
usertypexfuente$fuente[i] <- "adsense"
}
else if (redes.sociales) {
usertypexfuente$fuente[i] <- "redes sociales"
}
else if (spam) {
usertypexfuente$fuente[i] <- "spam"
}
else {
usertypexfuente$fuente[i] <- usertypexfuente$fuente[i]
}
}
usertypexfuente <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:sessions",
dimensions = "ga:source, ga:Medium")
View(ga_data)
View(usertypexfuente)
usertypexfuente$fuente <- NA
#sesion2 <- usertypexfuente[is.na(usertypexfuente$fuente),]
for (i in 1:nrow(usertypexfuente)) {
organic <- grepl("start.iminent.com|websearch.com|
crawler.com|allmyweb.com",usertypexfuente$source[i], ignore.case = T)
adwords <- grepl("cpc|ccp",usertypexfuente$source[i], ignore.case = T)
referral <- grepl(".*google\\.com\\.pe.*|.*google\\.co\\.ve\\.*|
.*google\\.com\\.br.*|.*google\\.com\\.bo\\.*|
.*google\\.com\\.ar.*|.*google\\.com.*", usertypexfuente$source[i],
ignore.case = T)
spam <- grepl("site.*|.*event.*|.*free.*|.*theguardlan.*|
^guardlink.*|.*torture.*|.*forum.*|
.*buy.*|.*share.*|.*buttons.*|
.*pyme\\.lavoztx\\.com\\.*|.*amezon.*|
computrabajo.com.pe|.*porn.*|quality|localhost:8080",
usertypexfuente$source[i],
ignore.case = T)
adsense <- grepl("tpc.googlesyndication.com|
googleads[.]g[.]doubleclick[.]net",usertypexfuente$source[i], ignore.case = T)
redes.sociales <- grepl("facebook.com|
twitter.com",usertypexfuente$source[i], ignore.case = T)
if (usertypexfuente$source[i] == "(direct)") {
usertypexfuente$fuente[i] <- "directo"
}
else if (usertypexfuente$medium[i] == "organic" |
organic) {
usertypexfuente$fuente[i] <- "organico"
}
else if (usertypexfuente$source[i] == "google"
& adwords) {
usertypexfuente$fuente[i] <- "adwords"
}
else if (referral) {
usertypexfuente$fuente[i] <- "referencias"
}
else if (adsense) {
usertypexfuente$fuente[i] <- "adsense"
}
else if (redes.sociales) {
usertypexfuente$fuente[i] <- "redes sociales"
}
else if (spam) {
usertypexfuente$fuente[i] <- "spam"
}
else {
usertypexfuente$fuente[i] <- usertypexfuente$fuente[i]
}
}
View(usertypexfuente)
View(usertypexfuente)
usertypexfuente <- apply(usertypexfuente, 2, tolower)
#########################################
usertypexfuente$fuente <- NA
#sesion2 <- usertypexfuente[is.na(usertypexfuente$fuente),]
for (i in 1:nrow(usertypexfuente)) {
organic <- grepl("start.iminent.com|websearch.com|
crawler.com|allmyweb.com",usertypexfuente$source[i], ignore.case = T)
adwords <- grepl("cpc|ccp",usertypexfuente$source[i], ignore.case = T)
referral <- grepl(".*google\\.com\\.pe.*|.*google\\.co\\.ve\\.*|
.*google\\.com\\.br.*|.*google\\.com\\.bo\\.*|
.*google\\.com\\.ar.*|.*google\\.com.*", usertypexfuente$source[i],
ignore.case = T)
spam <- grepl("site.*|.*event.*|.*free.*|.*theguardlan.*|
^guardlink.*|.*torture.*|.*forum.*|
.*buy.*|.*share.*|.*buttons.*|
.*pyme\\.lavoztx\\.com\\.*|.*amezon.*|
computrabajo.com.pe|.*porn.*|quality|localhost:8080",
usertypexfuente$source[i],
ignore.case = T)
adsense <- grepl("tpc.googlesyndication.com|
googleads[.]g[.]doubleclick[.]net",usertypexfuente$source[i], ignore.case = T)
redes.sociales <- grepl("facebook.com|
twitter.com",usertypexfuente$source[i], ignore.case = T)
if (usertypexfuente$source[i] == "(direct)") {
usertypexfuente$fuente[i] <- "directo"
}
else if (usertypexfuente$medium[i] == "organic" |
organic) {
usertypexfuente$fuente[i] <- "organico"
}
else if (usertypexfuente$source[i] == "google"
& adwords) {
usertypexfuente$fuente[i] <- "adwords"
}
else if (referral) {
usertypexfuente$fuente[i] <- "referencias"
}
else if (adsense) {
usertypexfuente$fuente[i] <- "adsense"
}
else if (redes.sociales) {
usertypexfuente$fuente[i] <- "redes sociales"
}
else if (spam) {
usertypexfuente$fuente[i] <- "spam"
}
else {
usertypexfuente$fuente[i] <- usertypexfuente$fuente[i]
}
}
nrow(usertypexfuente)
usertypexfuente <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:sessions",
dimensions = "ga:source, ga:Medium")
usertypexfuente <- apply(usertypexfuente, 2, tolower)
usertypexfuente <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:sessions",
dimensions = "ga:source, ga:Medium")
usertypexfuente <- as.data.frame(apply(usertypexfuente, 2, tolower))
View(usertypexfuente)
View(usertypexfuente)
usertypexfuente <- as.data.frame(apply(usertypexfuente, 1, tolower))
View(usertypexfuente)
colnames(usertypexfuente) <- tolower(colnames(usertypexfuente))
View(usertypexfuente)
usertypexfuente <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:sessions",
dimensions = "ga:source, ga:Medium")
colnames(usertypexfuente) <- tolower(colnames(usertypexfuente))
View(usertypexfuente)
usertypexfuente$fuente <- NA
#sesion2 <- usertypexfuente[is.na(usertypexfuente$fuente),]
for (i in 1:nrow(usertypexfuente)) {
organic <- grepl("start.iminent.com|websearch.com|
crawler.com|allmyweb.com",usertypexfuente$source[i], ignore.case = T)
adwords <- grepl("cpc|ccp",usertypexfuente$source[i], ignore.case = T)
referral <- grepl(".*google\\.com\\.pe.*|.*google\\.co\\.ve\\.*|
.*google\\.com\\.br.*|.*google\\.com\\.bo\\.*|
.*google\\.com\\.ar.*|.*google\\.com.*", usertypexfuente$source[i],
ignore.case = T)
spam <- grepl("site.*|.*event.*|.*free.*|.*theguardlan.*|
^guardlink.*|.*torture.*|.*forum.*|
.*buy.*|.*share.*|.*buttons.*|
.*pyme\\.lavoztx\\.com\\.*|.*amezon.*|
computrabajo.com.pe|.*porn.*|quality|localhost:8080",
usertypexfuente$source[i],
ignore.case = T)
adsense <- grepl("tpc.googlesyndication.com|
googleads[.]g[.]doubleclick[.]net",usertypexfuente$source[i], ignore.case = T)
redes.sociales <- grepl("facebook.com|
twitter.com",usertypexfuente$source[i], ignore.case = T)
if (usertypexfuente$source[i] == "(direct)") {
usertypexfuente$fuente[i] <- "directo"
}
else if (usertypexfuente$medium[i] == "organic" |
organic) {
usertypexfuente$fuente[i] <- "organico"
}
else if (usertypexfuente$source[i] == "google"
& adwords) {
usertypexfuente$fuente[i] <- "adwords"
}
else if (referral) {
usertypexfuente$fuente[i] <- "referencias"
}
else if (adsense) {
usertypexfuente$fuente[i] <- "adsense"
}
else if (redes.sociales) {
usertypexfuente$fuente[i] <- "redes sociales"
}
else if (spam) {
usertypexfuente$fuente[i] <- "spam"
}
else {
usertypexfuente$fuente[i] <- usertypexfuente$fuente[i]
}
}
View(usertypexfuente)
View(usertypexfuente)
for (i in 1:nrow(usertypexfuente)) {
organic <- grepl("start.iminent.com|websearch.com|
crawler.com|allmyweb.com",usertypexfuente$source[i], ignore.case = T)
adwords <- grepl("cpc|ccp",usertypexfuente$source[i], ignore.case = T)
referral <- grepl(".*google\\.com\\.pe.*|.*google\\.co\\.ve\\.*|
.*google\\.com\\.br.*|.*google\\.com\\.bo\\.*|
.*google\\.com\\.ar.*|.*google\\.com.*", usertypexfuente$source[i],
ignore.case = T)
spam <- grepl("site.*|.*event.*|.*free.*|.*theguardlan.*|
^guardlink.*|.*torture.*|.*forum.*|
.*buy.*|.*share.*|.*buttons.*|
.*pyme\\.lavoztx\\.com\\.*|.*amezon.*|
computrabajo.com.pe|.*porn.*|quality|localhost:8080",
usertypexfuente$source[i],
ignore.case = T)
adsense <- grepl("tpc.googlesyndication.com|
googleads[.]g[.]doubleclick[.]net",usertypexfuente$source[i], ignore.case = T)
redes.sociales <- grepl("facebook.com|
twitter.com",usertypexfuente$source[i], ignore.case = T)
if (usertypexfuente$source[i] == "(direct)") {
usertypexfuente$fuente[i] <- "directo"
}
else if (usertypexfuente$medium[i] == "organic" |
organic) {
usertypexfuente$fuente[i] <- "organico"
}
else if (usertypexfuente$source[i] == "google"
& adwords) {
usertypexfuente$fuente[i] <- "adwords"
}
else if (referral) {
usertypexfuente$fuente[i] <- "referencias"
}
else if (adsense) {
usertypexfuente$fuente[i] <- "adsense"
}
else if (redes.sociales) {
usertypexfuente$fuente[i] <- "redes sociales"
}
else if (spam) {
usertypexfuente$fuente[i] <- "spam"
}
else {
usertypexfuente$fuente[i] <- "spam"
}
}
View(usertypexfuente)
View(hair_eye_male)
View(usertypexfuente)
View(usertypexfuente)
View(hair_eye_male)
View(hair_eye_male)
n2 <- nPlot(sessions ~ medium, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
n2
n2 <- nPlot(sessions, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
?nPlot
??nPlot
n2 <- nPlot(fuente ~ sessions, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
n2
n2 <- nPlot(fuente ~ sessions, group = '', data = usertypexfuente, type = 'multiBarChart')
n2
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
n2
View(HairEyeColor)
View(HairEyeColor)
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
n2
usertypexfuente[usertypexfuente$fuente == "spam",]
spam <- usertypexfuente[usertypexfuente$fuente == "spam",]
sum(spam$sessions)
View(spam)
directo <- usertypexfuente[usertypexfuente$fuente == "directo",]
sum(directo$sessions)
View(usertypexfuente)
organico <- usertypexfuente[usertypexfuente$fuente == "organico",]
sum(organico$sessions)
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente, type = 'multiBarChart')
n2
View(usertypexfuente)
library(dplyr)
usertypexfuente2 <- usertypexfuente
usertypexfuente2 <- usertypexfuente %>%
group_by(fuentes) %>%
summarise(sessions)
usertypexfuente2 <- usertypexfuente %>%
group_by(fuente) %>%
summarise(sessions)
usertypexfuente2 <- usertypexfuente %>%
group_by(fuente) %>%
summarise(sessions = sum(sessions))
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente2, type = 'multiBarChart')
n2
sum(spam$sessions)
n2$yAxis(tickFormat = "#! function(d) {
//will change to .2% to show how to get two decimal
return d3.format('.0f')
} !#")
n2
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente2, type = 'multiBarChart')
n2$yAxis(tickFormat = "#! function(d) {return d3.format('.0f')(d)} !#")
n2
n1 <- nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart', group = 'gear')
n1$chart(tooltipContent= "#! function(key, x, y, e){
return '<b>Disp:</b> ' + e.point.disp + '<br/>' +
'<b>Cyl: </b>' + e.point.cyl
} !#")
n1
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return 'x: ' + x + '  y: ' + y
} !#")
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return 'x + '  y: ' + y
} !#")
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return 'x: ' + x + '  y: ' + y
} !#")
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return 'fuente: ' + x + '  sesiones: ' + y
} !#")
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return 'sesiones: ' + y
} !#")
n2
n2$chart(tooltipContent = "#! function(key, x, y){
return ' sesiones:  ' + y
} !#")
n2
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente2, type = 'multiBarChart')
n2$yAxis(tickFormat = "#! function(d) {return d3.format('.0f')(d)} !#")
n2
n2 <- nPlot(sessions ~ fuente, group = 'fuente', data = usertypexfuente2, type = 'multiBarChart')
n2$yAxis(tickFormat = "#! function(d) {return d3.format('.0f')(d)} !#")
n2$chart(tooltipContent = "#! function(key, x, y){
return ' sesiones:  ' + y
} !#")
n2
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
shiny::runApp('Starcom/Dashboard')
loadData <- function() {
# Read all the files into a list
filesInfo <- drop_dir(outputDir)
filePaths <- filesInfo$path
data <- lapply(filePaths, drop_read_csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data
}
outputDir <- "starcom"
filePath <- "D:\\RCoursera\\Starcom\\usertypexfuente.csv"
loadData
loadData()
library(rdrop2)
loadData()
filesInfo <- drop_dir(outputDir)
filesInfo <- drop_dir(outputDir)
filesInfo <- drop_dir(outputDir)
View(filesInfo)
rm(list = ls())
library(rdrop2)
drop_auth(cache = F)
outputDir <- "starcom"
#filePath <- "D:\\RCoursera\\Starcom\\usertypexfuente.csv"
#Save data to DropBox
# drop_upload(filePath, dest = outputDir)
#
#
# #Read data
# DropCSV <- drop_dir(outputDir)
#
#
# usertype <- drop_read_csv("/starcom/usertypexfuente.csv")
loadData <- function() {
# Read all the files into a list
filesInfo <- drop_dir(outputDir)
filePaths <- filesInfo$path
data <- lapply(filePaths, drop_read_csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
data
}
loadData()
loadData$data
loadData()
loadData <- function() {
# Read all the files into a list
filesInfo <- drop_dir(outputDir)
filePaths <- filesInfo$path
data <- lapply(filePaths, drop_read_csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
data <- do.call(rbind, data)
class(data)
}
loadData()
loadData <- function() {
# Read all the files into a list
filesInfo <- drop_dir(outputDir)
filePaths <- filesInfo$path
usertypexfuente <- lapply(filePaths, drop_read_csv, stringsAsFactors = FALSE)
# Concatenate all data together into one data.frame
usertypexfuente <- do.call(rbind, usertypexfuente)
usertypexfuente
}
loadData()
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
usertypexfuente <- drop_read_csv("/starcom/usertypexfuente.csv")
library(rdrop2)
usertypexfuente <- drop_read_csv("/starcom/usertypexfuente.csv")
shiny::runApp('Starcom/Dashboard')
View(usertypexfuente)
head(usertypexfuente)
shiny::runApp('Starcom/Dashboard')
file.choose()
usertypexfuente <- read.csv("D:\\RCoursera\\Starcom\\usertypexfuente.csv")
rm(list = ls())
usertypexfuente <- read.csv("D:\\RCoursera\\Starcom\\usertypexfuente.csv")
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
library(rCharts)
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
library(rCharts)
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
file.choose()
shiny::runApp('Starcom/Dashboard')
library(rCharts)
shiny::runApp('Starcom/Dashboard')
usertypexfuente <- read.csv("D:\\RCoursera\\Starcom\\usertypexfuente.csv")
shiny::runApp('Starcom/Dashboard')
rm(list = ls())
shiny::runApp('Starcom/Dashboard')
file.choose()
shiny::runApp('Starcom/Dashboard')
source("usertype.R")
file.choose()
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
library(rdrop2)
drop_auth(cache = F)
drop_read_csv("starcom/usertypexfuente.csv")
usertypexfuente <- drop_read_csv("starcom/usertypexfuente.csv")
View(usertypexfuente)
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
rm(list = ls())
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
shiny::runApp('Starcom/Dashboard')
usertypexfuente <- drop_read_csv("starcom/usertypexfuente.csv")
shiny::runApp('Starcom/Dashboard')
shiny::runApp()
shiny::runApp('D:/RCoursera/r-s-l')
shiny::runApp('D:/RCoursera/Starcom/Dashboard')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
file.choose()
shiny::runApp()
file.choose()
shiny::runApp()
